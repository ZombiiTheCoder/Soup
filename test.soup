?? print(1+1.1)

?? fn map(function, array){
??     var i = 0
??     var newArray = []
??     while (i<array.length) {
??         val element = array[i]
??         newArray.append(function(element))
??     }
??     ret newArray
?? }

fn add(a){
    ret a+1
}

print("!\nBuild Finished")
var array = [ 1, 2, 3, 4, 5, 6, 7, 8 ]
fn map(function, array){
    var i = 0
    var ne = [1]
    var test = {
        newArray: ne
        arraye: array
    }
    ?? var newArray = []
    var q = test.newArray;
    var q2 = test.arraye;
    while (i < q2.length) {
        val element = q2[i]
        ?? print("!\n", q)
        q = append("q", function(q2[i]))
        i++
    }
    ret test.newArray
}

fn test(_args) {
    var i = 0
    while (i<_args.length) {
        val v = _args[i]
        print("!\n%v: %v".format(i, v))
        i++
    }
}

fn listify(arg) {
    if (type(arg) != "String") {
        print("!\nArgument (arg) must be String not type %v".format(type(arg)))
        exit(0)
    }
    var i = 0
    var array = []
    while (i<arg.length) {
        array = append(array, arg[i])
        i++
    }
    ret array
}

fn format_array(arg) {
    var arr = "["
    var last = arg[arg.length-1]
    var end = ", "
    var i = 0
    while (i<arg.length) {
        if (arg[i] == last) {
            end = ""
        }
        if (type(arg[i]) == "Array") {
                arr = arr + format_array(arg[i]) + end
            }else {
                arr = arr + arg[i] + end
            }
        i++
    }
    arr = arr + "]"
    ret arr
}

?? var q = map(add, array)
?? var i = 0
?? while (i<q.length) {
??     print("!\n", q[i])
??     i++
?? }

test(format_array([listify("hi"), listify("hi")]))